---
title: "The war with Star Wars"
subtitle: "Course DS 250"
author: "David Pineda"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code

---

```{python}
#| label: libraries
#| include: false
import pandas as pd
import altair as alt
import numpy as np

from IPython.display import Markdown
from IPython.display import display
from tabulate import tabulate
```


## Data

Importing Star Wars Data

```{python}
#| label: project data
#| code-summary: Read and format project data
# Include and execute your code here
dat = pd.read_csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/star-wars-survey/StarWars.csv",encoding= 'unicode_escape', skiprows=2, header=None)
```


## Background

In 2014, FiveThirtyEight surveyed over 1000 people to write the article titled, America’s Favorite ‘Star Wars’ Movies (And Least Favorite Characters). They have provided the data on GitHub.

For this project, use the Star Wars survey data to figure out if they can predict an interviewing job candidate’s current income based on a few responses about Star Wars movies.



## [New Table Names]

Shorten the column names and clean them up for easier use with pandas. Provide a table or list that exemplifies how you fixed the names.

- skipped the first two rows, and set the header to None value, the default it now 0 to 37. 
- len(dat.columns) to see the length of the number or columns
- info(verbose=True) to list all the names of the columns
- iloc[:,6] check the information of all column 6

```{python}
#| label: GQ1
#| code-summary: Read and format data
# Include and execute your code here



dat = (dat.rename(columns={
  0: "response_id", 1: "seen_six", 
  2: "fan_starwars", 3: "seen_movie_one", 
  4: "seen_movie_two", 5: "seen_movie_three", 
  6: "seen_movie_four", 7: "seen_movie_five", 
  8: "seen_movie_six", 9: "rank_movie_one", 
  10: "rank_movie_two", 11: "rank_movie_three", 
  12: "rank_movie_four", 13: "rank_movie_five", 
  14: "rank_movie_six", 15: "rate_han", 
  16: "rate_luke", 17: "rate_lei", 
  18: "rate_anakin", 19: "rate_obi", 
  20: "rate_palpatine", 21: "rate_vadar", 
  22: "rate_lando", 23: "rate_boba", 
  24: "rate_c-3P0", 25: "rate_r2",
  26: "rate_jar", 27: "rate_padme", 
  28: "rate_yoda", 29: "character_shot", 
  30: "familiar_eu", 31: "fan_eu", 
  32: "fan_startrek", 33: "gender", 
  34: "age", 35: "h_income", 
  36: "education", 37: "location"}
  ))

```



## [Clean Formated Data]

Clean and format the data so that it can be used in a machine learning model. As you format the data, you should complete each item listed below. In your final report provide example(s) of the reformatted data with a short description of the changes made.

_type your results and analysis here_


# Seen at least one film

Filter the dataset to respondents that have seen at least one film

Short Summary: 
```{python}
#| label: GQ2 chart

dat_one = dat.query("seen_six != 'No'")

```



Create a new column that converts the age ranges to a single number. Drop the age range categorical column.
```{python}
#| label: GQ2 table

dat_one['age'] = (dat_one['age']).str.replace('18-', '', regex=True).str.replace('30-', '', regex=True).str.replace('45-', '', regex=True).str.replace('>60|> 60', '60', regex=True)


```



Create a new column that converts the education groupings to a single number. Drop the school categorical column
```{python}
#| label: GQ2 table

dat_one['education'] = dat_one['education'].fillna(2)

edu_dict = {
  

  'Less than high school degree' : 0,
  'High school degree' : 1,
  'Some college or Associate degree' : 2,
  'Bachelor degree': 3,
  'Graduate degree' : 4

}

dat_one['education'] = dat_one['education'].replace(edu_dict)

dat_one["education"] = dat_one["education"].astype("int")

```



Create a new column that converts the income ranges to a single number. Drop the income range categorical column.
```{python}
# income range into categorical column
dat_one = dat_one.dropna(subset=['h_income'])

income_dict = {
  
  '$0 - $24,999' : 24999,
  '$25,000 - $49,999': 49999,
  '$50,000 - $99,999' : 99999,
  '$100,000 - $149,999' : 149999,
  '$150,000+' : 150000
  

}

dat_one['h_income'] = dat_one['h_income'].replace(income_dict)


dat_one["h_income"] = dat_one["h_income"].astype("int")
```



Character Rankings using factorize to a new column
```{python}
# character ranking

column_names = ['rate_han', 'rate_luke', 'rate_lei', 'rate_anakin', 'rate_obi', 'rate_palpatine', 'rate_vadar', 'rate_lando', 'rate_boba', 'rate_c-3P0', 'rate_r2', 'rate_jar', 'rate_padme', 'rate_yoda']

dat_one = dat_one.dropna(subset=column_names)

fav_dict = {
  
  'Very favorably' : 6,
  'Somewhat favorably': 5,
  'Very unfavorably' : 4,
  'Neither favorably nor unfavorably (neutral)' : 3,
  'Somewhat unfavorably' : 2,
  'Unfamiliar (N/A)' : 1
  

}

dat_one[column_names] = dat_one[column_names].replace(fav_dict)

```


Create your target (also known as “y” or “label”) column based on the new income range column.
```{python}
# income range column less than 50000



dat_one = dat_one.assign(h_income = np.where(
  dat_one["h_income"] < 50000, 
  0, 
  1))



```







One-hot encode all remaining categorical columns.
```{python}
#| label: GQ2 table

codes, uniques = pd.factorize([])


df_gen = pd.get_dummies(dat_one[['gender', 'character_shot', 'location']])

dat_one = dat_one.drop(columns=['gender', 'character_shot', 'location'])

df_he = pd.get_dummies(dat_one[['seen_six', 'fan_starwars', 'seen_movie_one', 'seen_movie_two', 'seen_movie_three', 'seen_movie_four', 'seen_movie_five', 'seen_movie_six']])

df = pd.concat([dat_one, df_he])

```




## GRAND QUESTION 3

Validate that the data provided on GitHub lines up with the article by recreating 2 of the visuals from the article.

_type your results and analysis here_

```{python}
#| label: GQ3
#| code-summary: Read and format data
# Include and execute your code here


```




## Grand Question 4

Build a machine learning model that predicts whether a person makes more than $50k. Describe your model and report the accuracy.

```{python}
#| label: GQ4
#| code-summary: Read and format data
# Include and execute your code here
```
