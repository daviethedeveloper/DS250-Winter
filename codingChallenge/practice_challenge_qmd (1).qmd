---
title: "Practice Coding Challenge"
subtitle: "Course DS 250"
author: "David Pineda"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
---

## Practice Coding Challenge

### Name: David Pineda

### Instructions

_In the Final Coding Challenge I will ask you to complete problems about as challenging as what is shown below.  Plus, you will need to fit a machine learning model with data I provide._

_Remember, you will only have 60 minutes to work on the challenge! You will not be able to complete every question perfectly, but you should spend at least a little time on each question._

_Paste your answers and code inside this `.qmd` file._


### Practice Challenges

Start by loading these packages and data:

```{python}

import pandas as pd
import altair as alt
import numpy as np
from vega_datasets import data

df = pd.read_csv('mtcars_missing.csv')

df_clean = (df
.replace([-999, 'n/a'], [np.nan,np.nan])
)

```

<br>

**Question 1:** Try recreating the chart below using the [mtcars missing](https://github.com/byuidatascience/data4missing/raw/master/data-raw/mtcars_missing/mtcars_missing.csv) data that you've already loaded.

- Note that `hp` has missing values, and you will have to replace them with the mean.
- Please drop all cars with a missing name.

![](practice_mtcars.png)

**Question 1 Code:**

```{python}

# Replace NaN and -999 with NaN
df2 = df_clean

mean_hp = df2["hp"].mean()

df2['hp'] = df2["hp"].fillna(mean_hp)

new_df2 = df2.dropna(subset=['car'])

display(new_df2)
```
**Question 1 Answer:**

_Show your chart here._
```{python}


source = new_df2

newx = source.query("hp == 80")


base = alt.Chart(source).mark_circle(color='red').encode(
    x=alt.X('hp'),
    y='mpg'
)

rule = alt.Chart(pd.DataFrame({'x':[80, 160]})).mark_rule().encode(
    x='x',
)

text = alt.Chart(pd.DataFrame({'x': [70]}, {'y': [25]})).mark_text("Big", 'center').encode(
  x = 'x',
  y = 'y'
)

base + rule + text

```

<br>

**Question 2:** Try writing code to recreate the following table.

- Have `cyl` on the rows and `carb` on the columns
- The values inside the table represent the number of cars with that particular `cyl`/`carb` combination.
- The `pd.crosstab()` function could be helpful, or maybe `pd.pivot_table()`.


|   cyl |   1 |   2 |   3 |   4 |   6 |   8 |
|------:|----:|----:|----:|----:|----:|----:|
|     4 |   5 |   6 |   0 |   0 |   0 |   0 |
|     6 |   2 |   0 |   0 |   4 |   1 |   0 |
|     8 |   0 |   4 |   3 |   6 |   0 |   1 |

**Question 2 Code:**

```{python}
df3 = df_clean

cyl = np.array(df3['cyl'])

carb = np.array(df3['carb'])

pd.crosstab(cyl, carb, rownames=['cyl'], colnames=['carb'])




```

**Question 2 Answer:**

_Show your table here._


<br>

**Additional Questions:** On the Final Coding Challenge, I will also ask you to fit a Machine Learning Model. There may be 1-2 additional questions.
